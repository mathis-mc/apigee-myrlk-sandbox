
name: Apigee CI with Maven

on: push
  
env:
  API_VERSION: eval 

  # Default Target Apigee Organization et environment (can be also be dynamically defined in [Set Variables *] steps)
  DEFAULT_APIGEE_ORG: c-sandbox-apigee
  DEFAULT_APIGEE_ORG_PROD: c-sandbox-apigee-prod
  DEFAULT_APIGEE_ENV: eval
  TEST_HOST: 34.120.206.66.dev.io

  # Retrieve Apigee UserID and password from repository settings (secrets)
  APIGEE_CREDS_USR: ${{ secrets.APIGEE_CREDS_USR }}
  APIGEE_CREDS_PSW: ${{ secrets.APIGEE_CREDS_PSW }}

  GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}

  # These variables will be dynamically defined in [Set Variables *] steps
  AUTHOR_EMAIL: ''
  APIGEE_ORG: ''
  APIGEE_ENV: ''
  APIGEE_DEPLOYMENT_SUFFIX: ''
  

jobs:
  apigee-deploy:
    if: "!contains(github.event.head_commit.message, 'skip-old-ci')"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Set Variables depending on branch
      - name: Set Variables for [Main] branch
        if: github.ref == 'refs/heads/main'
        run: |
          echo "AUTHOR_EMAIL=$(echo $GITHUB_ACTOR)" >> $GITHUB_ENV
          echo "APIGEE_ORG=$(echo $DEFAULT_APIGEE_ORG)" >> $GITHUB_ENV
          echo "APIGEE_ENV=$(echo $DEFAULT_APIGEE_ENV)" >> $GITHUB_ENV

      - name: Set Variables for [Prod] branch
        if: github.ref == 'refs/heads/prod'
        run: |
          echo "AUTHOR_EMAIL=$(echo $GITHUB_ACTOR)" >> $GITHUB_ENV
          echo "APIGEE_ORG=$(echo $DEFAULT_APIGEE_ORG_PROD)" >> $GITHUB_ENV
          echo "APIGEE_ENV=prod)" >> $GITHUB_ENV
  
      - name: Set Variables for branch not [Main], not [Prod]
        if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/prod'
        run: |
          echo "APIGEE_DEPLOYMENT_SUFFIX=$(echo $GITHUB_REF | sed 's/.*\///')" >> $GITHUB_ENV
          echo "AUTHOR_EMAIL=$(echo $GITHUB_ACTOR)" >> $GITHUB_ENV
          echo "APIGEE_ORG=$(echo $DEFAULT_APIGEE_ORG)" >> $GITHUB_ENV
          echo "APIGEE_ENV=$(echo $DEFAULT_APIGEE_ENV)" >> $GITHUB_ENV

      - name: Install Apigee CLI
        run: |
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
      - name: Setup Prefs
        run: |
          $HOME/.apigeecli/bin/apigeecli prefs set --nocheck=true -o $APIGEE_ORG
      # Create Dependencies (npm) Cache 
      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` 
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Install dependencies (npm)
      - name: Install Dependencies
        run: npm install --silent --no-fund

      # Run apigeeLint test + upload artifact (apigeelint-out.html)
      - name: apigeelint
        run: ./node_modules/apigeelint/cli.js -s ./apiproxies/my-retail-link-v1 -f html.js -e PO013,PO025

      # Generate SA key file from secret variable
      - name: Generate SA key file
        working-directory: ./apiproxies/my-retail-link-v1
        if: env.API_VERSION == 'eval'
        run: | 
          echo $GCP_SERVICE_ACCOUNT > sa.json

      # Generate SA key file from secret variable
      - name: Generate SA key file for validation
        working-directory: ./apiproxies/api-validation
        if: env.API_VERSION == 'eval'
        run: | 
          echo $GCP_SERVICE_ACCOUNT > sa.json

      # Deploy Apigee Config (Apigee Maven plugin)
      # - name: mvn configure, package, import, deploy, and test bundle
      #   working-directory: ./apiproxies/my-retail-link-v1
      #   run:  mvn install -Peval -Dapigee.org=$APIGEE_ORG -Denv=$APIGEE_ENV -Dfile=sa.json
      - name: Deploy API Proxy
        working-directory: ./apiproxies/my-retail-link-v1
        run: |
          $HOME/.apigeecli/bin/apigeecli apis create bundle -e $DEFAULT_APIGEE_ENV -n my-retail-link-v1 -f ./apiproxy -a sa.json --ovr

      - name: apigeelint validation
        run: ./node_modules/apigeelint/cli.js -s ./apiproxies/api-validation -f html.js -e PO013,PO025

      - name: Deploy API Proxy Validation
        working-directory: ./apiproxies/api-validation
        run: |
          $HOME/.apigeecli/bin/apigeecli apis create bundle -e $DEFAULT_APIGEE_ENV -n api-validation -f ./apiproxy -a sa.json --ovr
          
      - name: Get Target Server
        continue-on-error: true
        id: GetTargetServer
        working-directory: ./apiproxies/api-validation
        run: | 
          $HOME/.apigeecli/bin/apigeecli targetservers get -n Google -e $DEFAULT_APIGEE_ENV -a sa.json --no-output >> $GITHUB_OUTPUT
          
      - name: Create Target Server
        if : ${{steps.GetTargetServer.outcome == 'failure'}}
        working-directory: ./apiproxies/api-validation
        run: $HOME/.apigeecli/bin/apigeecli targetservers create -a sa.json -n Google -e $DEFAULT_APIGEE_ENV -p 80 -s google.com --tls true
        
      - name: Update Target Server
        if : ${{steps.GetTargetServer.outcome == 'success'}}
        working-directory: ./apiproxies/api-validation
        run: $HOME/.apigeecli/bin/apigeecli targetservers update -a sa.json -n Google -e $DEFAULT_APIGEE_ENV -p 80 -s google.com --tls true
        
      - name: Get App Developer
        continue-on-error: true
        id: GetAppDeveloper
        working-directory: ./apiproxies/api-validation
        run: | 
          $HOME/.apigeecli/bin/apigeecli developers get -n toto@gmail.com -a sa.json --no-output >> $GITHUB_OUTPUT
          
      - name: Create App Developer
        if : ${{steps.GetAppDeveloper.outcome == 'failure'}}
        working-directory: ./apiproxies/api-validation
        run: $HOME/.apigeecli/bin/apigeecli developers create -a sa.json -n toto@gmail.com -f Toto -s Dev -u totoDev
        
      - name: Update App Developper
        if : ${{steps.GetAppDeveloper.outcome == 'success'}}
        working-directory: ./apiproxies/api-validation
        run: $HOME/.apigeecli/bin/apigeecli developers update -a sa.json -n toto@gmail.com -f Toto -s Dev -u totoDev

      - name: Create App Product
        id: CreateAppProduct
        working-directory: ./apiproxies/api-validation
        continue-on-error: true
        run: $HOME/.apigeecli/bin/apigeecli products create -n "Toto Product" -m "Toto Product" -e $DEFAULT_APIGEE_ENV -p api-validation -f auto -a sa.json
        
      - name: Create App
        id: CreateApp
        working-directory: ./apiproxies/api-validation
        continue-on-error: true
        run: $HOME/.apigeecli/bin/apigeecli apps create -n "Toto App" -e toto@gmail.com -a sa.json --no-output >> $GITHUB_OUTPUT
        
      - name: Update App
        if : ${{steps.CreateApp.outcome == 'failure'}}
        working-directory: ./apiproxies/api-validation
        run: $HOME/.apigeecli/bin/apigeecli apps update -n "Toto App" -p "Toto Product" -e toto@gmail.com -a sa.json
  automated-api-tests:
    if: "!contains(github.event.head_commit.message, 'no-test')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
      - name: Run API tests
        run: |
          postman collection run "30932611-3b46f8bc-3bd5-468e-8849-053efee5f632" -e "30932611-836c22b9-3dd3-46e1-9268-fc9175208f98"   

