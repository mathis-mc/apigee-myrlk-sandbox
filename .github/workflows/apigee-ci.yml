
name: Apigee CI with Maven

on: push
  
env:
  API_VERSION: dev 

  # Default Target Apigee Organization et environment (can be also be dynamically defined in [Set Variables *] steps)
  DEFAULT_APIGEE_ORG: c-sandbox-apigee
  DEFAULT_APIGEE_ENV: dev
  TEST_HOST: 34.120.206.66.dev.io

  # Retrieve Apigee UserID and password from repository settings (secrets)
  APIGEE_CREDS_USR: ${{ secrets.APIGEE_CREDS_USR }}
  APIGEE_CREDS_PSW: ${{ secrets.APIGEE_CREDS_PSW }}

  GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}

  # These variables will be dynamically defined in [Set Variables *] steps
  AUTHOR_EMAIL: ''
  APIGEE_ORG: ''
  APIGEE_ENV: ''
  APIGEE_DEPLOYMENT_SUFFIX: ''
  

jobs:
  Apigee-Deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

  # Set Variables depending on branch
      - name: Set Variables for [Main] branch
        if: github.ref == 'refs/heads/main'
        run: |
          echo "AUTHOR_EMAIL=$(echo $GITHUB_ACTOR)" >> $GITHUB_ENV
          echo "APIGEE_ORG=$(echo $DEFAULT_APIGEE_ORG)" >> $GITHUB_ENV
          echo "APIGEE_ENV=$(echo $DEFAULT_APIGEE_ENV)" >> $GITHUB_ENV

      - name: Set Variables for [Prod] branch
        if: github.ref == 'refs/heads/prod'
        run: |
          echo "AUTHOR_EMAIL=$(echo $GITHUB_ACTOR)" >> $GITHUB_ENV
          echo "APIGEE_ORG=$(echo $DEFAULT_APIGEE_ORG)" >> $GITHUB_ENV
          echo "APIGEE_ENV=prod)" >> $GITHUB_ENV
  
      - name: Set Variables for branch not [Main], not [Prod]
        if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/prod'
        run: |
          echo "APIGEE_DEPLOYMENT_SUFFIX=$(echo $GITHUB_REF | sed 's/.*\///')" >> $GITHUB_ENV
          echo "AUTHOR_EMAIL=$(echo $GITHUB_ACTOR)" >> $GITHUB_ENV
          echo "APIGEE_ORG=$(echo $DEFAULT_APIGEE_ORG)" >> $GITHUB_ENV
          echo "APIGEE_ENV=$(echo $DEFAULT_APIGEE_ENV)" >> $GITHUB_ENV


  # Create Dependencies (npm) Cache 
      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` 
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-


  # Install dependencies (npm)
      - name: Install Dependencies
        run: npm install --silent --no-fund

  # Run apigeeLint test + upload artifact (apigeelint-out.html)
      - name: apigeelint
        run: ./node_modules/apigeelint/cli.js -s ./apiproxies/helloworld -f html.js -e PO013,PO025

  # Setup Maven & Maven Cache
      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' 
          java-version: 8

      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2   


  # Generate SA key file from secret variable
      - name: Generate SA key file
        working-directory: ./apiproxies/helloworld
        if: env.API_VERSION == 'dev'
        run: | 
          echo $GCP_SERVICE_ACCOUNT > sa.json



#   # Deploy Apigee Config (Apigee Maven plugin)
      - name: mvn configure, package, import, deploy, and test bundle
        working-directory: ./apiproxies/helloworld
        run:  mvn install -Pdev -Dapigee.org=$APIGEE_ORG -Denv=$APIGEE_ENV -Dfile=sa.json

